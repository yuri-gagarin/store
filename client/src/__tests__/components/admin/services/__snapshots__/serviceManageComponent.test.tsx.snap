// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Service Manage Holder Tests Default Component state at first render Should correctly render 1`] = `
<MemoryRouter>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "key": "jox4jb",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "jox4jb",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Component>
      <withRouter(ServiceManageHolder)
        dispatch={[Function]}
        state={
          Object {
            "bonusVideoState": Object {
              "currentBonusVideoData": Object {
                "_id": "",
                "createdAt": "",
                "description": "",
                "vimeoURL": "",
                "youTubeURL": "",
              },
              "error": null,
              "loadedBonusVideos": Array [],
              "loading": false,
              "responseMsg": "",
            },
            "productState": Object {
              "currentProductData": Object {
                "_id": "",
                "createdAt": "",
                "description": "",
                "details": "",
                "images": Array [],
                "name": "",
                "price": "",
              },
              "error": null,
              "loadedProducts": Array [],
              "loading": false,
              "responseMsg": "",
            },
            "serviceState": Object {
              "currentServiceData": Object {
                "_id": "",
                "createdAt": "",
                "description": "",
                "images": Array [],
                "name": "",
                "price": "",
              },
              "error": null,
              "loadedServices": Array [],
              "loading": false,
              "responseMsg": "",
            },
            "storeItemState": Object {
              "currentStoreItemData": Object {
                "_id": "",
                "categories": Array [],
                "createdAt": "",
                "description": "",
                "details": "",
                "images": Array [],
                "name": "",
                "price": "",
                "storeId": "",
                "storeName": "",
              },
              "error": null,
              "loadedStoreItems": Array [],
              "loading": false,
              "numberOfItems": 0,
              "responseMsg": "",
            },
            "storeState": Object {
              "currentStoreData": Object {
                "_id": "",
                "createdAt": "",
                "description": "",
                "images": Array [],
                "title": "",
              },
              "error": null,
              "loadedStores": Array [],
              "loading": false,
              "responseMsg": "",
            },
          }
        }
      >
        <ServiceManageHolder
          dispatch={[Function]}
          history={
            Object {
              "action": "POP",
              "block": [Function],
              "canGo": [Function],
              "createHref": [Function],
              "entries": Array [
                Object {
                  "hash": "",
                  "key": "jox4jb",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
              ],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "index": 0,
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "key": "jox4jb",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            }
          }
          location={
            Object {
              "hash": "",
              "key": "jox4jb",
              "pathname": "/",
              "search": "",
              "state": undefined,
            }
          }
          match={
            Object {
              "isExact": true,
              "params": Object {},
              "path": "/",
              "url": "/",
            }
          }
          state={
            Object {
              "bonusVideoState": Object {
                "currentBonusVideoData": Object {
                  "_id": "",
                  "createdAt": "",
                  "description": "",
                  "vimeoURL": "",
                  "youTubeURL": "",
                },
                "error": null,
                "loadedBonusVideos": Array [],
                "loading": false,
                "responseMsg": "",
              },
              "productState": Object {
                "currentProductData": Object {
                  "_id": "",
                  "createdAt": "",
                  "description": "",
                  "details": "",
                  "images": Array [],
                  "name": "",
                  "price": "",
                },
                "error": null,
                "loadedProducts": Array [],
                "loading": false,
                "responseMsg": "",
              },
              "serviceState": Object {
                "currentServiceData": Object {
                  "_id": "",
                  "createdAt": "",
                  "description": "",
                  "images": Array [],
                  "name": "",
                  "price": "",
                },
                "error": null,
                "loadedServices": Array [],
                "loading": false,
                "responseMsg": "",
              },
              "storeItemState": Object {
                "currentStoreItemData": Object {
                  "_id": "",
                  "categories": Array [],
                  "createdAt": "",
                  "description": "",
                  "details": "",
                  "images": Array [],
                  "name": "",
                  "price": "",
                  "storeId": "",
                  "storeName": "",
                },
                "error": null,
                "loadedStoreItems": Array [],
                "loading": false,
                "numberOfItems": 0,
                "responseMsg": "",
              },
              "storeState": Object {
                "currentStoreData": Object {
                  "_id": "",
                  "createdAt": "",
                  "description": "",
                  "images": Array [],
                  "title": "",
                },
                "error": null,
                "loadedStores": Array [],
                "loading": false,
                "responseMsg": "",
              },
            }
          }
        >
          <LoaderExampleText>
            <div
              style={
                Object {
                  "height": "100vh",
                }
              }
            >
              <Segment
                style={
                  Object {
                    "height": "100vh",
                  }
                }
              >
                <div
                  className="ui segment"
                  style={
                    Object {
                      "height": "100vh",
                    }
                  }
                >
                  <Dimmer
                    active={true}
                    inverted={true}
                  >
                    <DimmerInner
                      active={true}
                      inverted={true}
                    >
                      <Ref
                        innerRef={
                          Object {
                            "current": <div
                              class="ui active transition visible inverted dimmer"
                              style="display: flex;"
                            >
                              <div
                                class="content"
                              >
                                <div
                                  class="ui text loader"
                                >
                                  Please Wait
                                </div>
                              </div>
                            </div>,
                          }
                        }
                      >
                        <RefFindNode
                          innerRef={
                            Object {
                              "current": <div
                                class="ui active transition visible inverted dimmer"
                                style="display: flex;"
                              >
                                <div
                                  class="content"
                                >
                                  <div
                                    class="ui text loader"
                                  >
                                    Please Wait
                                  </div>
                                </div>
                              </div>,
                            }
                          }
                        >
                          <div
                            className="ui active transition visible inverted dimmer"
                            onClick={[Function]}
                          >
                            <div
                              className="content"
                            >
                              <Loader>
                                <div
                                  className="ui text loader"
                                >
                                  Please Wait
                                </div>
                              </Loader>
                            </div>
                          </div>
                        </RefFindNode>
                      </Ref>
                    </DimmerInner>
                  </Dimmer>
                </div>
              </Segment>
            </div>
          </LoaderExampleText>
        </ServiceManageHolder>
      </withRouter(ServiceManageHolder)>
    </Component>
  </Router>
</MemoryRouter>
`;

exports[`Service Manage Holder Tests State after a successful API call Should render correct ServiceManageHolder Component 1`] = `
<Grid
  columns={2}
  id="serviceManageHolder"
  padded={true}
  stackable={true}
>
  <div
    className="ui stackable padded two column grid"
    id="serviceManageHolder"
  >
    <Route
      path="undefined/edit"
    />
    <Route
      exact={true}
    >
      <GridRow>
        <div
          className="row"
        >
          <GridColumn
            computer={12}
            mobile={16}
            tablet={8}
          >
            <div
              className="twelve wide computer sixteen wide mobile eight wide tablet column"
            />
          </GridColumn>
          <GridColumn
            computer={4}
            mobile={16}
            tablet={8}
          >
            <div
              className="four wide computer sixteen wide mobile eight wide tablet column"
            />
          </GridColumn>
        </div>
      </GridRow>
    </Route>
  </div>
</Grid>
`;
